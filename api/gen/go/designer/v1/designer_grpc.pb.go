// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package designerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DesignerAPIClient is the client API for DesignerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DesignerAPIClient interface {
	CreateDesigner(ctx context.Context, in *CreateDesignerRequest, opts ...grpc.CallOption) (*CreateDesignerResponse, error)
	GetDesigner(ctx context.Context, in *GetDesignerRequest, opts ...grpc.CallOption) (*GetDesignerResponse, error)
}

type designerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDesignerAPIClient(cc grpc.ClientConnInterface) DesignerAPIClient {
	return &designerAPIClient{cc}
}

func (c *designerAPIClient) CreateDesigner(ctx context.Context, in *CreateDesignerRequest, opts ...grpc.CallOption) (*CreateDesignerResponse, error) {
	out := new(CreateDesignerResponse)
	err := c.cc.Invoke(ctx, "/designer.v1.DesignerAPI/CreateDesigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *designerAPIClient) GetDesigner(ctx context.Context, in *GetDesignerRequest, opts ...grpc.CallOption) (*GetDesignerResponse, error) {
	out := new(GetDesignerResponse)
	err := c.cc.Invoke(ctx, "/designer.v1.DesignerAPI/GetDesigner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesignerAPIServer is the server API for DesignerAPI service.
// All implementations should embed UnimplementedDesignerAPIServer
// for forward compatibility
type DesignerAPIServer interface {
	CreateDesigner(context.Context, *CreateDesignerRequest) (*CreateDesignerResponse, error)
	GetDesigner(context.Context, *GetDesignerRequest) (*GetDesignerResponse, error)
}

// UnimplementedDesignerAPIServer should be embedded to have forward compatible implementations.
type UnimplementedDesignerAPIServer struct {
}

func (UnimplementedDesignerAPIServer) CreateDesigner(context.Context, *CreateDesignerRequest) (*CreateDesignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDesigner not implemented")
}
func (UnimplementedDesignerAPIServer) GetDesigner(context.Context, *GetDesignerRequest) (*GetDesignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesigner not implemented")
}

// UnsafeDesignerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesignerAPIServer will
// result in compilation errors.
type UnsafeDesignerAPIServer interface {
	mustEmbedUnimplementedDesignerAPIServer()
}

func RegisterDesignerAPIServer(s grpc.ServiceRegistrar, srv DesignerAPIServer) {
	s.RegisterService(&_DesignerAPI_serviceDesc, srv)
}

func _DesignerAPI_CreateDesigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDesignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignerAPIServer).CreateDesigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/designer.v1.DesignerAPI/CreateDesigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignerAPIServer).CreateDesigner(ctx, req.(*CreateDesignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesignerAPI_GetDesigner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesignerAPIServer).GetDesigner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/designer.v1.DesignerAPI/GetDesigner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesignerAPIServer).GetDesigner(ctx, req.(*GetDesignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DesignerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "designer.v1.DesignerAPI",
	HandlerType: (*DesignerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDesigner",
			Handler:    _DesignerAPI_CreateDesigner_Handler,
		},
		{
			MethodName: "GetDesigner",
			Handler:    _DesignerAPI_GetDesigner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "designer/v1/designer.proto",
}
